/*
 * This file is generated by jOOQ.
 */
package com.armin.revolut.models.tables;


import com.armin.revolut.models.DefaultSchema;
import com.armin.revolut.models.Indexes;
import com.armin.revolut.models.Keys;
import com.armin.revolut.models.enums.RecordsReason;
import com.armin.revolut.models.tables.records.RecordsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Records extends TableImpl<RecordsRecord> {

    private static final long serialVersionUID = 1794548044;

    /**
     * The reference instance of <code>RECORDS</code>
     */
    public static final Records RECORDS = new Records();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordsRecord> getRecordType() {
        return RecordsRecord.class;
    }

    /**
     * The column <code>RECORDS.ID</code>.
     */
    public final TableField<RecordsRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>RECORDS.ACCOUNT_ID</code>.
     */
    public final TableField<RecordsRecord, Long> ACCOUNT_ID = createField(DSL.name("ACCOUNT_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>RECORDS.CREDIT</code>.
     */
    public final TableField<RecordsRecord, BigDecimal> CREDIT = createField(DSL.name("CREDIT"), org.jooq.impl.SQLDataType.DECIMAL.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>RECORDS.DEBIT</code>.
     */
    public final TableField<RecordsRecord, BigDecimal> DEBIT = createField(DSL.name("DEBIT"), org.jooq.impl.SQLDataType.DECIMAL.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>RECORDS.REASON</code>.
     */
    public final TableField<RecordsRecord, RecordsReason> REASON = createField(DSL.name("REASON"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.armin.revolut.models.enums.RecordsReason.class), this, "");

    /**
     * The column <code>RECORDS.CREATED_ON</code>.
     */
    public final TableField<RecordsRecord, LocalDateTime> CREATED_ON = createField(DSL.name("CREATED_ON"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>RECORDS</code> table reference
     */
    public Records() {
        this(DSL.name("RECORDS"), null);
    }

    /**
     * Create an aliased <code>RECORDS</code> table reference
     */
    public Records(String alias) {
        this(DSL.name(alias), RECORDS);
    }

    /**
     * Create an aliased <code>RECORDS</code> table reference
     */
    public Records(Name alias) {
        this(alias, RECORDS);
    }

    private Records(Name alias, Table<RecordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Records(Name alias, Table<RecordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Records(Table<O> child, ForeignKey<O, RecordsRecord> key) {
        super(child, key, RECORDS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_ACCOUNT_ID_INDEX_6, Indexes.PRIMARY_KEY_6);
    }

    @Override
    public Identity<RecordsRecord, Long> getIdentity() {
        return Keys.IDENTITY_RECORDS;
    }

    @Override
    public UniqueKey<RecordsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    @Override
    public List<UniqueKey<RecordsRecord>> getKeys() {
        return Arrays.<UniqueKey<RecordsRecord>>asList(Keys.CONSTRAINT_6);
    }

    @Override
    public List<ForeignKey<RecordsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RecordsRecord, ?>>asList(Keys.FK_ACCOUNT_ID);
    }

    public Account account() {
        return new Account(this, Keys.FK_ACCOUNT_ID);
    }

    @Override
    public Records as(String alias) {
        return new Records(DSL.name(alias), this);
    }

    @Override
    public Records as(Name alias) {
        return new Records(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Records rename(String name) {
        return new Records(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Records rename(Name name) {
        return new Records(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, BigDecimal, BigDecimal, RecordsReason, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
