/*
 * This file is generated by jOOQ.
 */
package com.armin.revolut.models.tables.daos;


import com.armin.revolut.models.enums.RecordsReason;
import com.armin.revolut.models.tables.Records;
import com.armin.revolut.models.tables.records.RecordsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecordsDao extends DAOImpl<RecordsRecord, com.armin.revolut.models.tables.pojos.Records, Long> {

    /**
     * Create a new RecordsDao without any configuration
     */
    public RecordsDao() {
        super(Records.RECORDS, com.armin.revolut.models.tables.pojos.Records.class);
    }

    /**
     * Create a new RecordsDao with an attached configuration
     */
    public RecordsDao(Configuration configuration) {
        super(Records.RECORDS, com.armin.revolut.models.tables.pojos.Records.class, configuration);
    }

    @Override
    public Long getId(com.armin.revolut.models.tables.pojos.Records object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Records.RECORDS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchById(Long... values) {
        return fetch(Records.RECORDS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public com.armin.revolut.models.tables.pojos.Records fetchOneById(Long value) {
        return fetchOne(Records.RECORDS.ID, value);
    }

    /**
     * Fetch records that have <code>ACCOUNT_ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchRangeOfAccountId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Records.RECORDS.ACCOUNT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ACCOUNT_ID IN (values)</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchByAccountId(Long... values) {
        return fetch(Records.RECORDS.ACCOUNT_ID, values);
    }

    /**
     * Fetch records that have <code>CREDIT BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchRangeOfCredit(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Records.RECORDS.CREDIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREDIT IN (values)</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchByCredit(BigDecimal... values) {
        return fetch(Records.RECORDS.CREDIT, values);
    }

    /**
     * Fetch records that have <code>DEBIT BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchRangeOfDebit(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Records.RECORDS.DEBIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DEBIT IN (values)</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchByDebit(BigDecimal... values) {
        return fetch(Records.RECORDS.DEBIT, values);
    }

    /**
     * Fetch records that have <code>REASON BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchRangeOfReason(RecordsReason lowerInclusive, RecordsReason upperInclusive) {
        return fetchRange(Records.RECORDS.REASON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REASON IN (values)</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchByReason(RecordsReason... values) {
        return fetch(Records.RECORDS.REASON, values);
    }

    /**
     * Fetch records that have <code>CREATED_ON BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchRangeOfCreatedOn(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Records.RECORDS.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREATED_ON IN (values)</code>
     */
    public List<com.armin.revolut.models.tables.pojos.Records> fetchByCreatedOn(LocalDateTime... values) {
        return fetch(Records.RECORDS.CREATED_ON, values);
    }
}
