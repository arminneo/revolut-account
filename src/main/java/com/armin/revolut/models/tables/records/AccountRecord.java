/*
 * This file is generated by jOOQ.
 */
package com.armin.revolut.models.tables.records;


import com.armin.revolut.models.tables.Account;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record6<Long, String, Integer, BigDecimal, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = -889395784;

    /**
     * Setter for <code>ACCOUNT.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>ACCOUNT.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>ACCOUNT.CODE</code>.
     */
    public void setCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>ACCOUNT.CODE</code>.
     */
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ACCOUNT.USER_ID</code>.
     */
    public void setUserId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>ACCOUNT.USER_ID</code>.
     */
    public Integer getUserId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>ACCOUNT.BALANCE</code>.
     */
    public void setBalance(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>ACCOUNT.BALANCE</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>ACCOUNT.CREATED_ON</code>.
     */
    public void setCreatedOn(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>ACCOUNT.CREATED_ON</code>.
     */
    public LocalDateTime getCreatedOn() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>ACCOUNT.UPDATED_ON</code>.
     */
    public void setUpdatedOn(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>ACCOUNT.UPDATED_ON</code>.
     */
    public LocalDateTime getUpdatedOn() {
        return (LocalDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Integer, BigDecimal, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, String, Integer, BigDecimal, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Account.ACCOUNT.ID;
    }

    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.CODE;
    }

    @Override
    public Field<Integer> field3() {
        return Account.ACCOUNT.USER_ID;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Account.ACCOUNT.BALANCE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Account.ACCOUNT.CREATED_ON;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Account.ACCOUNT.UPDATED_ON;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getCode();
    }

    @Override
    public Integer component3() {
        return getUserId();
    }

    @Override
    public BigDecimal component4() {
        return getBalance();
    }

    @Override
    public LocalDateTime component5() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime component6() {
        return getUpdatedOn();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getCode();
    }

    @Override
    public Integer value3() {
        return getUserId();
    }

    @Override
    public BigDecimal value4() {
        return getBalance();
    }

    @Override
    public LocalDateTime value5() {
        return getCreatedOn();
    }

    @Override
    public LocalDateTime value6() {
        return getUpdatedOn();
    }

    @Override
    public AccountRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AccountRecord value2(String value) {
        setCode(value);
        return this;
    }

    @Override
    public AccountRecord value3(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public AccountRecord value4(BigDecimal value) {
        setBalance(value);
        return this;
    }

    @Override
    public AccountRecord value5(LocalDateTime value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    public AccountRecord value6(LocalDateTime value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    public AccountRecord values(Long value1, String value2, Integer value3, BigDecimal value4, LocalDateTime value5, LocalDateTime value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(Long id, String code, Integer userId, BigDecimal balance, LocalDateTime createdOn, LocalDateTime updatedOn) {
        super(Account.ACCOUNT);

        set(0, id);
        set(1, code);
        set(2, userId);
        set(3, balance);
        set(4, createdOn);
        set(5, updatedOn);
    }
}
